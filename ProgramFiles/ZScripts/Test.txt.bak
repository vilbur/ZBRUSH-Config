

/** useAndSaveBrush
  */
[RoutineDef, useAndSaveBrush
,
	//[Note, "useAndSaveBrush"]
	[MemWriteString, MEMBLOCK_BRUSHES, brush, 0 /* offset position */]

	[Note, [StrMerge, "useAndSaveBrush: ", [Var, brush ] ]]

	[IPress, [StrMerge, "Brush:", brush] ]
, // PARAMS
	brush
]
//[IButton, "useAndSaveBrush()" , "", [RoutineCall, useAndSaveBrush] ]





[IButton,TEST,"Press to play this ZScript. ZScript can be aborted at anytime by pressing the ëescí key.",


	[VarDef, ARRAY_LENGTH, 3 ]


	[If, [MemGetSize, MEMBLOCK_BRUSHES]
	, // THEN memory exists


		[VarDef, last_brush, "" ]
		[VarDef, current_brush, ""]

		[MemReadString, MEMBLOCK_BRUSHES, last_brush, 0]

		[VarSet, current_brush, [StrExtract, [IGetTitle, Brush:ItemInfo], 0, [StrLength, [IGetTitle, Brush:ItemInfo]] - 2 ] ] // remove period


		//[Note, last_brush]
		//[Note, [StrMerge, "current_brush: ", [Var, current_brush ] ]
		//[Note, [StrMerge, "last_brush: ", [Var, last_brush ] ]]




		[If, ([StrLength,current_brush]==[StrLength,last_brush])&&([StrFind,current_brush,last_brush]>-1)

		, // CURRENT BRUSH IS SAME AS LAST
			[Note, "USE NEXT OR FIRST BRUSH",, 0]
			//[MemWriteString, MEMBLOCK_BRUSHES, "", 0 /* offset position */]


			[Loop, [Var, ARRAY_LENGTH]
			,
				[VarDef, item, ""]
				[VarSet, index, (i + 1) * 32]

				[MemReadString, MEMBLOCK_BRUSHES, item, index]

				//[Note, item ,, 0]

				[If, ([StrLength,item]==[StrLength,current_brush])&&([StrFind,item,current_brush]>-1)
				, //

					[VarDef, next_brush, ""]

					[MemReadString, MEMBLOCK_BRUSHES, next_brush, #index + 32]

					[RoutineCall, useAndSaveBrush, next_brush]

				]

			,i]


		, // ELSE SET LAST BRUSH
			[Note, "USE LAST OR FIRST BRUSH",, 0]

			[If, [StrLength, last_brush ] == 0
			, // THEN
				[MemReadString, MEMBLOCK_BRUSHES, last_brush, 32] // get first brush
			]

			[RoutineCall, useAndSaveBrush, last_brush]
		]

		//[MemDelete, MEMBLOCK_BRUSHES]

	, // ELSE create memory block

		[MemCreate, MEMBLOCK_BRUSHES, 1024 /* size */ ]

		[MemWriteString, MEMBLOCK_BRUSHES, "", 0 /* offset position */]
		[MemWriteString, MEMBLOCK_BRUSHES, "Standard", 32 /* offset position */]
		[MemWriteString, MEMBLOCK_BRUSHES, "Clay", 64 /* offset position */]
		[MemWriteString, MEMBLOCK_BRUSHES, "Pinch", 96 /* offset position */]
	]


,,128,,, 128]/*End of TEST*/
