

/** Apply Alpha by name
  *
  */
[RoutineDef, ApplyAlpha
,
	[IPress,  [StrMerge, "Alpha: ", $alpha_name]]
, // PARAMS
	$alpha_name
] // END Apply Alpha
//[ IButton, "Apply Alpha()" , "", [RoutineCall, ApplyAlpha, "Alpha 01"] ]

/** TestResult
  *
  */
[RoutineDef, getAlphaFilename
,
	//[VarSet, $filename, [StrMerge, "/Alpha-List/", "alpha_", $alpha_id, ".zvr"]]
	[VarSet, $filename, [StrMerge, "Alpha-List\\", "alpha_", $alpha_id, ".zvr"]]
	//[VarSet, $filename, [StrMerge, "alpha_", $alpha_id, ".zvr"]]
, // PARAMS
	$alpha_id, $filename
] // END TestResult
//[ IButton, "getAlphaFilename()" , "", [VarDef, $filename, "Init Value"] [RoutineCall, getAlphaFilename, 2, $filename] [Note, $filename] ]

/** Delete Folder
  * IMPORTANT: ZFileUtils64.dll MUST be in script folder
  *
  * @param	string	$folder_path	relative or absolut path to folder
  */
[RoutineDef, deleteFolder
,
	//[VarSet, $folder_path, "Alpha-List" ]

	[VarSet,$dllPath,"ZFileUtils64.lib"]

	[VarSet, folder_path, [FileNameResolvePath, $folder_path]]

	[VarSet, err, [FileExecute, [Var, $dllPath], "EmptyFolder",  #folder_path]] // delete files in folder
	[VarSet, err, [FileExecute, [Var, $dllPath], "DeleteFolder", #folder_path]]	//delete the folder

	[If, err, [Note, "An error occurred.",, 2], [Note,"Folder deleted",,2]]
, // PARAMS
	$folder_path
] // END deleteFolder()



/** save current alpha name to file "alpha_{id}.zvr"
  *
  */
[RoutineDef, saveCurrentAlpha,
	//[Note, "saveCurrentAlpha"]
	[VarDef, $filename, ""]
	[VarDef, $current_alpha_id ]
	[VarDef, $current_alpha_name, "" ]

	[VarSet, $current_alpha_id,	[IGet,	ALPHA:ItemInfo] ]
	[VarSet, $current_alpha_name,	[IGetTitle,	Alpha:Current Alpha] ]

	[RoutineCall, getAlphaFilename, $current_alpha_id, $filename]

	//[Note, $current_alpha_id]
	//[Note, $current_alpha_name]
	//[Note, $filename]

	[VarSave, $current_alpha_name, $filename ]

] // END saveCurrentAlpha()
//[ IButton, "saveCurrentAlpha()" , "", [RoutineCall, saveCurrentAlpha] ]

/**
  *
  */
[RoutineDef, alphaToMask
,
	[If, [IGet, ALPHA:ItemInfo] // If Alpha exists
	, // THEN
		[RoutineCall, saveCurrentAlpha]

		[IPress,Tool:Masking:Mask By Alpha]

	, // ELSE
		[Note, "Alpha is not defined"]
	]

] // END alphaToMask
[IButton, "alphaToMask()", "", [RoutineCall, alphaToMask]]


/** maskToAlpha
  *
  */
[RoutineDef, maskToAlpha
,
	[IPress,Tool:Masking:Create Alpha]

	[RoutineCall, saveCurrentAlpha]

] // END maskToAlpha
[ IButton, "maskToAlpha()" , "", [RoutineCall, maskToAlpha] ]



/** loadMask
  *
  */
[RoutineDef, loadMask
,
	/* SAVE CURRRNT ALPHA */
	[VarDef, $current_alpha_name, "" ]
	[VarSet, $current_alpha_name, [IGetTitle, ALPHA: Current Alpha]]

	/* LAOD ALPHA TO MASK */
	[VarDef, $filename, ""]
	[RoutineCall, getAlphaFilename, $alpha_id, $filename]


	[If, [FileExists, $filename]
	, // THEN
		[VarLoad, $alpha_name, $filename]

		[RoutineCall, ApplyAlpha, $alpha_name]

		[IPress,Tool:Masking:Mask By Alpha]
		[IPress,Tool:Masking:ViewMask]

		/* Load back CURRRNT ALPHA */
		[IPress,  [StrMerge, "Alpha: ", $current_alpha_name]]

	, // ELSE
		[Note, "Alpha file is not defined"  ]
	]


, // PARAMS
	$alpha_id
] // END loadMask
