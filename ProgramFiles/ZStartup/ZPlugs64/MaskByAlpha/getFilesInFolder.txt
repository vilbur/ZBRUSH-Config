/** save current alpha name to file "alpha_{id}.zvr"
  *
  */
[RoutineDef, saveAlpha
,
	//[Note, saveAlpha]
	//[Note, $alpha_id]

	[If, [StrLength, $alpha_id] == 1
	, // THEN
		[VarSet, $alpha_name, [StrMerge, "Alpha 0", $alpha_id] ]
	, // ELSE
		[VarSet, $alpha_name, [StrMerge, "Alpha ", $alpha_id] ]
	]

	[VarDef, $filename, ""]
	[RoutineCall, alphaListPath, $alpha_id, $filename]

	//[Note, $alpha_name]

	[VarSave, $alpha_name, $filename ]
,
	$alpha_id
] // END saveCurrentAlpha()


/** getFilesInFolder
  *
  */
[RoutineDef, getFilesInFolder
,
	//[Note, getFilesInFolder]
	//[Note, $ALPHA_DEFAULT_FOLDER]

	[VarSet, folderName, [FileNameResolvePath, $ALPHA_DEFAULT_FOLDER]]
	//[Note, folderName ]

	[VarSet, dllPath, "ZFileUtils64.dll"]

	/* Get file count */
	[VarSet,fileCount,[FileExecute,[Var,dllPath],"GetFileNumber",folderName]]
	[If,fileCount < 0,[Note,"Error getting number of files in folder"]]

	/* Open folder */
	[VarSet,err,[FileExecute,[Var,dllPath],"OpenFolder",folderName]]
	//if we can't open the folder exit the zscript
	[If,err,[Note,"Error opening folder."][Exit]]

	//[Note, fileCount ]

	//create a memblock to get the file name
	[MemCreate,ZFileUtils_list, 512, 0]

	//[VarDef, files_array(fileCount),""]

	[Loop,fileCount,//loop through the files

		//get the filename
		[VarSet,err,[FileExecute,[Var,dllPath],"GetFile",,,ZFileUtils_list]]

		//an error means we've reached the end of the list, so exit the loop
		[If,err,[LoopExit]]

		[VarDef, fileName	, ""]
		//otherwise write the file name from the memblock to a variable
		[MemReadString, ZFileUtils_list, fileName]

		[VarSet, $alpha_id, i + 2] // add 2, 1 for index compenzation, 1 for default apla_01 which file is not in "C:\Program Files\Pixologic\ZBrush 2022\ZData\Alphas\"

		//[Note, fileName ]
		[RoutineCall, saveAlpha, $alpha_id ]


		//[Note, [StrMerge, $PLUGIN_CONTROLS, ":Mask ", $alpha_id ] ]
		[IEnable, [StrMerge, $PLUGIN_CONTROLS, ":Mask ", $alpha_id ] ]

	,i]//end loop


	/* Close folder */
	[VarSet,err,[FileExecute,[Var,dllPath],"CloseFolder",folderName]]
	[If,err,[Note,"Error closing folder."]]

	//delete the memblock as we've done with it
	[MemDelete,ZFileUtils_list]

	//[VarSet, $file, files_array]

//, // PARAMS
	//$folder_path
] // END getFilesInFolder()
[ IButton, "getFilesInFolder()" , "", [RoutineCall, getFilesInFolder] ]